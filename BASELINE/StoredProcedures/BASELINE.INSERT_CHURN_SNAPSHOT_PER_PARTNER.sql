CREATE PROCEDURE [BASELINE].[INSERT_CHURN_SNAPSHOT_PER_PARTNER]
--THE PROCEDURE CALCULATES CHURN USING THE METHODE DEVELOPED BY MR. ISAKSEN. SEE BELOW
--THE UNDERLYING DATA IN ADMIN.CHURN, ADMIN.CUST AND ADMIN.CUSTSETTINGS CHANGES EVERY DAY. I USE SNAPSHOTS OF THESE
--THE RESULTS OF THIS PROCEDURE IS STORED IN BASELINE.CHURN_PER_PARTNER

AS
DECLARE 
@LAST_DAY_LAST_MONTH DATE,
@FISCAL_YEAR_START_DT DATE,
@NUMBER_OF_MONTHS_PASSED INT,
@NUMBER_OF_ACTIVE_CUSTOMERS INT,
@NUMBER_OF_OFFERS INT,
@NUMBER_OF_CHURNED_CUSTOMERS INT,
@CHURN_PCT DECIMAL (20,10)

BEGIN
--SETTING DATE-PARAMETERS USED FOR ALL PARTNERS
SET @LAST_DAY_LAST_MONTH=
(SELECT EOMONTH(DATEADD(month, -1, Current_timestamp)));
PRINT CONCAT('@LAST_DAY_LAST_MONTH:', @LAST_DAY_LAST_MONTH);

SET @FISCAL_YEAR_START_DT=
(SELECT FiscalYearStart FROM REPORTING.DIM_DATO WHERE DATE=@LAST_DAY_LAST_MONTH);
PRINT CONCAT('@FISCAL_YEAR_START_DT:', @FISCAL_YEAR_START_DT);

SET @NUMBER_OF_MONTHS_PASSED=
(SELECT COUNT(DISTINCT LastDayOfMonth) 
FROM REPORTING.DIM_DATO 
WHERE [Date] BETWEEN @FISCAL_YEAR_START_DT AND @LAST_DAY_LAST_MONTH);

PRINT CONCAT('@NUMBER_OF_MONTHS_PASSED:', @NUMBER_OF_MONTHS_PASSED);

--CALCULATIONS AND MERGES INTO BASELINE.CHURN_PER_PARTNER
PRINT ('MERGE STATEMENT - NUMBER OF ACTIVE CUSTOMERS');
	MERGE BASELINE.CHURN_PER_PARTNER T
	USING 
	(
		SELECT 
		SUM(CUSTNUMBER) AS NUMBER_OF_ACTIVE_CUSTOMERS, F_ID AS PARTNER_ID, @LAST_DAY_LAST_MONTH AS LAST_DAY_OF_MONTH
		FROM ADMIN.CUSTSTATS --PERMANENT DATA 
		WHERE RDATE=@LAST_DAY_LAST_MONTH
		GROUP BY F_ID
	) S

	ON (S.PARTNER_ID=T.PARTNER_ID AND S.LAST_DAY_OF_MONTH=T.LAST_DAY_OF_MONTH)
	WHEN MATCHED 
		THEN UPDATE SET 
		T.NUMBER_OF_ACTIVE_CUSTOMERS=S.NUMBER_OF_ACTIVE_CUSTOMERS
	WHEN NOT MATCHED BY TARGET
		THEN INSERT (PARTNER_ID, NUMBER_OF_ACTIVE_CUSTOMERS, LAST_DAY_OF_MONTH)
		VALUES (S.PARTNER_ID, S.NUMBER_OF_ACTIVE_CUSTOMERS, S.LAST_DAY_OF_MONTH);
	

PRINT ('MERGE STATEMENT - NUMBER OF CHURNED CUSTOMERS');
	MERGE BASELINE.CHURN_PER_PARTNER T
	USING 
	(
		SELECT COUNT (DISTINCT CHURN.CUST) AS NUMBER_OF_CHURNED_CUSTOMERS, CUST.FORHANDLERID AS PARTNER_ID, @LAST_DAY_LAST_MONTH AS LAST_DAY_OF_MONTH
		FROM ADMIN.ARCHIVE_CHURN CHURN
		LEFT JOIN ADMIN.ARCHIVE_CUST CUST ON CUST.CUSTID=CHURN.CUST 
	
		WHERE CAST(CHURN.ARCHIVE_TIMESTAMP AS DATE)= @LAST_DAY_LAST_MONTH
		AND CAST(CUST.ARCHIVE_TIMESTAMP AS DATE) = @LAST_DAY_LAST_MONTH
		AND CHURN.DT BETWEEN @FISCAL_YEAR_START_DT AND @LAST_DAY_LAST_MONTH
		AND CUST.ACTIVE=0 
		--CONNECTION A/S IS REMOVED. THE PARTNER RE-DREW FROM UNI-TEL ALONG WITH ITS CUSTOMERS. SO THE RESIGNATIONS ARE FILTERED AWAY
		AND CUST.FORHANDLERID<>12 
		--BANKRUPT CUSTOMERS OR CUSTOMERS ON THE WAY TO BALIFFS COURT MUST BE INCLUDED 
		GROUP BY CUST.FORHANDLERID
	) S
	
	ON (S.PARTNER_ID=T.PARTNER_ID AND S.LAST_DAY_OF_MONTH=T.LAST_DAY_OF_MONTH)
	WHEN MATCHED 
		THEN UPDATE SET 
		T.NUMBER_OF_CHURNED_CUSTOMERS=S.NUMBER_OF_CHURNED_CUSTOMERS
	WHEN NOT MATCHED BY TARGET
		THEN INSERT (PARTNER_ID, NUMBER_OF_CHURNED_CUSTOMERS, LAST_DAY_OF_MONTH)
		VALUES (S.PARTNER_ID, S.NUMBER_OF_CHURNED_CUSTOMERS, S.LAST_DAY_OF_MONTH);

PRINT ('MERGE STATEMENT - NUMBER OF OFFERS ');
	MERGE BASELINE.CHURN_PER_PARTNER T
	USING 
	(
		SELECT 
		CUST.FORHANDLERID AS PARTNER_ID, 
		COUNT (DISTINCT CHURN.CUST) AS NUMBER_OF_OFFERS, 
		@LAST_DAY_LAST_MONTH AS LAST_DAY_OF_MONTH
		FROM ADMIN.ARCHIVE_CHURN CHURN 
		LEFT JOIN ADMIN.ARCHIVE_CUST CUST ON CHURN.CUST=CUST.CUSTID
		WHERE CAST (CHURN.ARCHIVE_TIMESTAMP AS DATE)= @LAST_DAY_LAST_MONTH
		AND CAST (CUST.ARCHIVE_TIMESTAMP AS DATE) = @LAST_DAY_LAST_MONTH
		AND CAST (CHURN.DT AS DATE) BETWEEN @FISCAL_YEAR_START_DT AND @LAST_DAY_LAST_MONTH
		AND CUST.ACTIVE=0 
		AND CUST.FORHANDLERID NOT IN (12,43,0)  --, CONNECTION.DK, UNICOM.DK, UNITEL
		AND CUST.CREATED>'2015-01-01'
		AND CHURN.CUST NOT IN (SELECT CUSTID FROM ADMIN.TURNOVER WHERE AMOUNT>0) --ADMIN.TURNOVER IS PERMANENT DATA
		AND CUST.CUSTID NOT IN (SELECT CUSTID FROM ADMIN.ARCHIVE_CUSTSETTINGS WHERE SETTING='BILL_TO_CUST' AND CAST (ARCHIVE_TIMESTAMP AS DATE)=@LAST_DAY_LAST_MONTH)
		GROUP BY CUST.FORHANDLERID 
	) S
	ON (S.PARTNER_ID=T.PARTNER_ID AND S.LAST_DAY_OF_MONTH=T.LAST_DAY_OF_MONTH)
	WHEN MATCHED 
		THEN UPDATE SET 
		T.NUMBER_OF_OFFERS=S.NUMBER_OF_OFFERS
	WHEN NOT MATCHED BY TARGET
		THEN INSERT (PARTNER_ID, NUMBER_OF_OFFERS, LAST_DAY_OF_MONTH)
		VALUES (S.PARTNER_ID, S.NUMBER_OF_OFFERS, S.LAST_DAY_OF_MONTH);

--UPDATES TO TABLE 

	PRINT ('SETS NUMBER OF OFFERS TO 0 IF NULL IN ORDER TO HAVE THE THE SUBSEQUENT CALCULATIONS SUCCED')
		UPDATE BASELINE.CHURN_PER_PARTNER
		SET NUMBER_OF_OFFERS=0
		WHERE NUMBER_OF_OFFERS IS NULL;

	PRINT ('SETS NUMBER OF CHURNED CUSTOMERS TO 0 IF NULL IN ORDER TO HAVE THE THE SUBSEQUENT CALCULATIONS SUCCED')
		UPDATE BASELINE.CHURN_PER_PARTNER
		SET NUMBER_OF_CHURNED_CUSTOMERS=0
		WHERE NUMBER_OF_CHURNED_CUSTOMERS IS NULL;

	PRINT ('SETS NUMBER OF ACTIVE CUSTOMERS TO 0 IF NULL IN ORDER TO HAVE THE THE SUBSEQUENT CALCULATIONS SUCCED')
		UPDATE BASELINE.CHURN_PER_PARTNER
		SET NUMBER_OF_ACTIVE_CUSTOMERS=0
		WHERE NUMBER_OF_ACTIVE_CUSTOMERS IS NULL;

--DIVISIONS TO CALCULATE CHURN PERCENTAGE PER PARTNER
	PRINT ('UPDATES BASELINE.CHURN_PER_PARTNER.FIRST_DEVISION WITH (CHURNED CUSTOMERS-OFFERS) DIVIDED BY ACTIVE CUSTOMERS');
		UPDATE BASELINE.CHURN_PER_PARTNER
		SET FIRST_DEVISION=
		ISNULL
		(
			(
			CAST (NUMBER_OF_CHURNED_CUSTOMERS AS DECIMAL(20,10)) - CAST(NUMBER_OF_OFFERS AS DECIMAL(20,10))
			)
			/CAST (NUMBER_OF_ACTIVE_CUSTOMERS AS DECIMAL (20,10))
		,0)
		WHERE NUMBER_OF_ACTIVE_CUSTOMERS >0 --DIVISION BY 0 IS NOT ALLOWED
		;
		
	PRINT ('CALCULATES CHURN PCT BY DIVIDING THE FIRST DEVISION BY THE NUMBER OF MONTHS PASSED AND MULIPLY BY 12 TO GET ESTIMATE AN ENTIRE YEAR. FINALY CONVERTING TO PERCENTAGE');
		UPDATE BASELINE.CHURN_PER_PARTNER
		SET CHURN_PCT=FIRST_DEVISION/CAST(@NUMBER_OF_MONTHS_PASSED AS DECIMAL(20,10))*12*100;

PRINT ('UPDATES BASELINE TABLE WITH THE DECLARED VARIABLES USED IN THE CALCULATIONS')
	UPDATE BASELINE.CHURN_PER_PARTNER
	SET 
	FISCAL_YEAR_START_DT=@FISCAL_YEAR_START_DT,
	NUMBER_OF_MONTHS_PASSED=@NUMBER_OF_MONTHS_PASSED
	WHERE LAST_DAY_OF_MONTH=@LAST_DAY_LAST_MONTH;

END

/*
METHOD TO CALCULATE CHURN FRA MR. ISAKSEN

Fra: Morten Isaksen <misak@uni-tel.dk> 
Sendt: 17. februar 2020 14:16
Til: Iben Sønderskov <iben@uni-tel.dk>
Emne: SV: Churn
 
(1)	Kunder pr 1/2-2020: 6235
(2)	Tilbud: 40
(3)	Churnede kunder: 394
 
(394-40)/6235/7*12 = 9,73%

chrun beregning for finansår 2020-2021 dvs. 1.7.2020 til og med 30.6.2021

1. Tal fra http://admin4.uni-tel.dk/admin/forhandlere/stat_1.php
select sum(custnumber) 
from admin.custstats c2 
where rdate='2021-06-30'

2.-- tilbud – husk at sætte det rigtige dato interval ind
SELECT count (distinct ch.cust)
FROM admin.churn  ch
LEFT JOIN admin.cust c ON c.`custid`=ch.`cust`
WHERE ch.dt BETWEEN '2020-07-01' AND '2021-06-30'  
AND ch.cust NOT IN (SELECT custid FROM admin.turnover WHERE amount>0) 
AND c.active=0 
AND c.forhandlerid NOT IN (12,43,0)  #Unitel selv, connection.dk, unicom.dk
AND c.created>'2015-01-01'
AND c.custid NOT IN (SELECT custid FROM admin.custsettings WHERE setting='bill_to_cust');

3.-- churnede kunder – husk at sætte det rigtige dato interval ind
SELECT count (distinct ch.cust) 
FROM admin.churn ch 
LEFT JOIN admin.cust c ON c.custid=ch.cust 
WHERE ch.dt BETWEEN '2019-07-01' AND '2020-06-30'  
AND c.active=0 
AND c.forhandlerid<>12 #Connection A/S sorteres fra. Niebe oplyser, at forhandleren "træk" sig fra Uni-Tel med sine kunder. Derfor skal opsigelserne ikke medregnes

resultater og beregning
1) 7079 aktive kunder 30.6.2021
2) 62 tilbud --turnover ikke opdateret
3) 702

select (702-62)/7079 * 100 
9,04 procent

*/


GO


