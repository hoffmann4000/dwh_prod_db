ALTER PROCEDURE [REPORTING].[MERGE_FACT_CHURN]
--THE PROCEDURE CALCULATES CHURN USING THE METHODE DEVELOPED BY MR. ISAKSEN. SEE BELOW
--THE UNDERLYING DATA IN ADMIN.CHURN, ADMIN.CUST AND ADMIN.CUSTSETTINGS CHANGES EVERY DAY. I USE SNAPSHOTS OF THESE STORED IN ADMIN.ARCHIVE_TABLE_NAME
--THE RESULTS OF THIS PROCEDURE IS STORED IN REPORTING.FACT_CHURN
AS
DECLARE 
@LAST_DAY_LAST_MONTH DATE,
@FISCAL_YEAR_START_DT DATE,
@NUMBER_OF_MONTHS_PASSED INT,
@NUMBER_OF_ACTIVE_CUSTOMERS INT,
@NUMBER_OF_OFFERS INT,
@NUMBER_OF_CHURNED_CUSTOMERS INT,
@CHURN_PCT DECIMAL (20,10),
@LOAD_DATE DATETIME2(0) 

BEGIN

--SETTING DATE-PARAMETERS USED FOR ALL PARTNERS
	SET @LAST_DAY_LAST_MONTH=
	(SELECT EOMONTH(DATEADD(month, -1, Current_timestamp)));
	PRINT CONCAT('@LAST_DAY_LAST_MONTH:', @LAST_DAY_LAST_MONTH);

	SET @FISCAL_YEAR_START_DT=
	(SELECT FISCALYEARSTART FROM REPORTING.DIM_DATO WHERE DATE=@LAST_DAY_LAST_MONTH);
	PRINT CONCAT('@FISCAL_YEAR_START_DT:', @FISCAL_YEAR_START_DT);

	SET @NUMBER_OF_MONTHS_PASSED=
	(SELECT COUNT(DISTINCT LastDayOfMonth) 
	FROM REPORTING.DIM_DATO 
	WHERE [DATE] BETWEEN @FISCAL_YEAR_START_DT AND @LAST_DAY_LAST_MONTH);
    PRINT CONCAT('@NUMBER_OF_MONTHS_PASSED:', @NUMBER_OF_MONTHS_PASSED);

	SET @LOAD_DATE = (SELECT CAST (GETDATE() AS DATETIME2(0)));
	PRINT CONCAT('@LOADDATE:', @LOAD_DATE);

--MERGE OF CALCULATION INTO REPORTING.FACT_CHURN
PRINT ('MERGE - NUMBER OF ACTIVE CUSTOMERS');
	MERGE REPORTING.FACT_CHURN T
	USING 
	(
		SELECT 
		SUM(CUSTNUMBER) AS NUMBER_OF_ACTIVE_CUSTOMERS, F_ID AS PARTNER_ID, @LAST_DAY_LAST_MONTH AS DATE_ID
		FROM ADMIN.CUSTSTATS --PERMANENT AND HISTORIC DATA 
		WHERE RDATE=@LAST_DAY_LAST_MONTH
		GROUP BY F_ID
	) S

	ON (S.PARTNER_ID=T.PARTNER_ID AND S.DATE_ID=T.DATE_ID)
	WHEN MATCHED 
		THEN UPDATE SET 
		T.NUMBER_OF_ACTIVE_CUSTOMERS=S.NUMBER_OF_ACTIVE_CUSTOMERS,
		T.LOAD_DATE=@LOAD_DATE
	WHEN NOT MATCHED BY TARGET
		THEN INSERT (PARTNER_ID, NUMBER_OF_ACTIVE_CUSTOMERS, DATE_ID, LOAD_DATE)
		VALUES (S.PARTNER_ID, S.NUMBER_OF_ACTIVE_CUSTOMERS, S.DATE_ID, @LOAD_DATE);

PRINT ('MERGE STATEMENT - NUMBER OF CHURNED CUSTOMERS');
	MERGE REPORTING.FACT_CHURN T
	USING 
	(
		SELECT COUNT (DISTINCT CHURN.CUST) AS NUMBER_OF_CHURNED_CUSTOMERS, CUST.FORHANDLERID AS PARTNER_ID, @LAST_DAY_LAST_MONTH AS DATE_ID
		FROM ADMIN.ARCHIVE_CHURN CHURN
		LEFT JOIN ADMIN.ARCHIVE_CUST CUST ON CUST.CUSTID=CHURN.CUST 
	
		WHERE CAST(CHURN.ARCHIVE_TIMESTAMP AS DATE)= @LAST_DAY_LAST_MONTH
		AND CAST(CUST.ARCHIVE_TIMESTAMP AS DATE) = @LAST_DAY_LAST_MONTH
		AND CHURN.DT BETWEEN @FISCAL_YEAR_START_DT AND @LAST_DAY_LAST_MONTH
		AND CUST.ACTIVE=0 
		--CONNECTION A/S IS REMOVED. THE PARTNER RE-DREW FROM UNI-TEL ALONG WITH ITS CUSTOMERS. SO THE RESIGNATIONS ARE FILTERED AWAY
		AND CUST.FORHANDLERID<>12 
		--BANKRUPT CUSTOMERS OR CUSTOMERS ON THE WAY TO BALIFFS COURT MUST BE INCLUDED 
		GROUP BY CUST.FORHANDLERID
	) S
	
	ON (S.PARTNER_ID=T.PARTNER_ID AND S.DATE_ID=T.DATE_ID)
	WHEN MATCHED 
		THEN UPDATE SET 
		T.NUMBER_OF_CHURNED_CUSTOMERS=S.NUMBER_OF_CHURNED_CUSTOMERS,
		T.LOAD_DATE=@LOAD_DATE
	WHEN NOT MATCHED BY TARGET
		THEN INSERT (PARTNER_ID, NUMBER_OF_CHURNED_CUSTOMERS, DATE_ID, LOAD_DATE)
		VALUES (S.PARTNER_ID, S.NUMBER_OF_CHURNED_CUSTOMERS, S.DATE_ID, @LOAD_DATE);

PRINT ('MERGE STATEMENT - NUMBER OF OFFERS');
	MERGE REPORTING.FACT_CHURN T
	USING 
	(
		SELECT 
		CUST.FORHANDLERID AS PARTNER_ID, 
		COUNT (DISTINCT CHURN.CUST) AS NUMBER_OF_OFFERS, 
		@LAST_DAY_LAST_MONTH AS DATE_ID
		FROM ADMIN.ARCHIVE_CHURN CHURN 
		LEFT JOIN ADMIN.ARCHIVE_CUST CUST ON CHURN.CUST=CUST.CUSTID
		WHERE CAST (CHURN.ARCHIVE_TIMESTAMP AS DATE)= @LAST_DAY_LAST_MONTH
		AND CAST (CUST.ARCHIVE_TIMESTAMP AS DATE) = @LAST_DAY_LAST_MONTH
		AND CAST (CHURN.DT AS DATE) BETWEEN @FISCAL_YEAR_START_DT AND @LAST_DAY_LAST_MONTH
		AND CUST.ACTIVE=0 
		AND CUST.FORHANDLERID NOT IN (12,43,0)  --, CONNECTION.DK, UNICOM.DK, UNITEL
		AND CUST.CREATED>'2015-01-01'
		AND CHURN.CUST NOT IN (SELECT CUSTID FROM ADMIN.TURNOVER WHERE AMOUNT>0) --ADMIN.TURNOVER IS PERMANENT DATA
		AND CUST.CUSTID NOT IN (SELECT CUSTID FROM ADMIN.ARCHIVE_CUSTSETTINGS WHERE SETTING='BILL_TO_CUST' AND CAST (ARCHIVE_TIMESTAMP AS DATE)=@LAST_DAY_LAST_MONTH)
		GROUP BY CUST.FORHANDLERID 
	) S
	ON (S.PARTNER_ID=T.PARTNER_ID AND S.DATE_ID=T.DATE_ID)
	WHEN MATCHED 
		THEN UPDATE SET 
		T.NUMBER_OF_OFFERS=S.NUMBER_OF_OFFERS,
		T.LOAD_DATE=@LOAD_DATE
	WHEN NOT MATCHED BY TARGET
		THEN INSERT (PARTNER_ID, NUMBER_OF_OFFERS, DATE_ID,LOAD_DATE)
		VALUES (S.PARTNER_ID, S.NUMBER_OF_OFFERS, S.DATE_ID, @LOAD_DATE);

--UPDATES TO TABLE 

	PRINT ('SETS NUMBER OF OFFERS TO 0 IF NULL IN ORDER TO HAVE THE THE SUBSEQUENT CALCULATIONS SUCCED')
		UPDATE REPORTING.FACT_CHURN
		SET NUMBER_OF_OFFERS=0
		WHERE NUMBER_OF_OFFERS IS NULL;

	PRINT ('SETS NUMBER OF CHURNED CUSTOMERS TO 0 IF NULL IN ORDER TO HAVE THE THE SUBSEQUENT CALCULATIONS SUCCED')
		UPDATE REPORTING.FACT_CHURN
		SET NUMBER_OF_CHURNED_CUSTOMERS=0
		WHERE NUMBER_OF_CHURNED_CUSTOMERS IS NULL;

	PRINT ('SETS NUMBER OF ACTIVE CUSTOMERS TO 0 IF NULL IN ORDER TO HAVE THE THE SUBSEQUENT CALCULATIONS SUCCED')
		UPDATE REPORTING.FACT_CHURN
		SET NUMBER_OF_ACTIVE_CUSTOMERS=0
		WHERE NUMBER_OF_ACTIVE_CUSTOMERS IS NULL;

--DIVISIONS TO CALCULATE CHURN PERCENTAGE PER PARTNER
	PRINT ('UPDATES REPORTING.FACT_CHURN.FIRST_DEVISION WITH (CHURNED CUSTOMERS-OFFERS) DIVIDED BY ACTIVE CUSTOMERS');
		UPDATE REPORTING.FACT_CHURN
		SET FIRST_DEVISION=
		ISNULL
		(
			(
			CAST (NUMBER_OF_CHURNED_CUSTOMERS AS DECIMAL(20,10)) - CAST(NUMBER_OF_OFFERS AS DECIMAL(20,10))
			)
			/CAST (NUMBER_OF_ACTIVE_CUSTOMERS AS DECIMAL (20,10))
		,0)
		WHERE NUMBER_OF_ACTIVE_CUSTOMERS >0 --DIVISION BY 0 IS NOT ALLOWED
		;
		
	PRINT ('CALCULATES CHURN PCT BY DIVIDING THE FIRST DEVISION BY THE NUMBER OF MONTHS PASSED AND MULIPLY BY 12 TO GET ESTIMATE AN ENTIRE YEAR. FINALY CONVERTING TO PERCENTAGE');
		UPDATE REPORTING.FACT_CHURN
		SET CHURN_PCT=FIRST_DEVISION/CAST(@NUMBER_OF_MONTHS_PASSED AS DECIMAL(20,10))*12*100;

	PRINT ('UPDATES TARGET TABLE WITH THE DECLARED VARIABLES USED IN THE CALCULATIONS')
		UPDATE REPORTING.FACT_CHURN
		SET 
		FISCAL_YEAR_START_DT=@FISCAL_YEAR_START_DT,
		NUMBER_OF_MONTHS_PASSED=@NUMBER_OF_MONTHS_PASSED
		WHERE DATE_ID=@LAST_DAY_LAST_MONTH;


	PRINT ('CREATE TABLE FOR HISTORIC VALUES AND INSERT OF HISTORIC DATA INTO TEMP TABLE FOR A LATER MERGE');

	CREATE TABLE #FACT_CHURN_HISTORIC_VALUES
	(
	[PARTNER_ID] [int] NULL,
	[DATE_ID] [date] NULL,
	[FISCAL_YEAR_START_DT] [date] NULL,
	[NUMBER_OF_MONTHS_PASSED] [int] NULL,
	[NUMBER_OF_CHURNED_CUSTOMERS] [int] NULL,
	[NUMBER_OF_OFFERS] [int] NULL,
	[NUMBER_OF_ACTIVE_CUSTOMERS] [int] NULL,
	[FIRST_DEVISION] [decimal](20, 10) NULL,
	[CHURN_PCT] [decimal](20, 10) NULL,
	[LOAD_DATE] [datetime2](0) NULL
	);

	INSERT INTO #FACT_CHURN_HISTORIC_VALUES 
	(
	PARTNER_ID, 
	DATE_ID,	
	FISCAL_YEAR_START_DT,
	NUMBER_OF_MONTHS_PASSED,
	NUMBER_OF_CHURNED_CUSTOMERS,
	NUMBER_OF_OFFERS,
	NUMBER_OF_ACTIVE_CUSTOMERS,
	FIRST_DEVISION,
	CHURN_PCT,
	LOAD_DATE
	)
	VALUES
	(999,	'2018-06-30',	'2017-07-01',	12,	NULL,	NULL,	NULL,	NULL,	10.7000000000, @LOAD_DATE),
	(999,	'2019-06-30',	'2018-07-01',   12,	NULL,	NULL,	NULL,	NULL,	10.5500000000, @LOAD_DATE),
	(999,	'2020-06-30',	'2019-07-01',	12,	NULL,	NULL,	NULL,	NULL,	10.3000000000, @LOAD_DATE),
	(999,	'2021-06-30',	'2020-07-01',	12,	702,	62,	    7079,	0.0904082498,	9.0000000000, @LOAD_DATE),
	(999,	'2021-11-30',	'2021-07-01',	5,	342,	24,	    7325,	0.0434129693,	10.4191126800, @LOAD_DATE);

	PRINT ('MERGES HISTORIC CHURN VALUES FOR ALL OF UNI-TEL INTO REPORTING.FACT_CHURN');

	MERGE REPORTING.FACT_CHURN T
	USING 
		(
		SELECT 
		DATE_ID, 
		PARTNER_ID,
		NUMBER_OF_CHURNED_CUSTOMERS,
		NUMBER_OF_OFFERS,
		NUMBER_OF_ACTIVE_CUSTOMERS,
		FISCAL_YEAR_START_DT, 
		NUMBER_OF_MONTHS_PASSED,
		FIRST_DEVISION,
		CHURN_PCT
		FROM 
		#FACT_CHURN_HISTORIC_VALUES 
		) S

	ON T.PARTNER_ID=S.PARTNER_ID AND T.DATE_ID=S.DATE_ID
	WHEN MATCHED THEN
	UPDATE SET 
	T.FISCAL_YEAR_START_DT=S.FISCAL_YEAR_START_DT,
	T.NUMBER_OF_MONTHS_PASSED=S.NUMBER_OF_MONTHS_PASSED,
	T.NUMBER_OF_CHURNED_CUSTOMERS=S.NUMBER_OF_CHURNED_CUSTOMERS,
	T.NUMBER_OF_OFFERS=S.NUMBER_OF_OFFERS,
	T.NUMBER_OF_ACTIVE_CUSTOMERS=S.NUMBER_OF_ACTIVE_CUSTOMERS,
	T.FIRST_DEVISION=S.FIRST_DEVISION,
	T.CHURN_PCT=S.CHURN_PCT,
	T.LOAD_DATE=@LOAD_DATE

	WHEN NOT MATCHED 
	THEN INSERT
	(
	PARTNER_ID,
	DATE_ID,
	FISCAL_YEAR_START_DT,
	NUMBER_OF_MONTHS_PASSED,
	NUMBER_OF_CHURNED_CUSTOMERS,
	NUMBER_OF_OFFERS,
	NUMBER_OF_ACTIVE_CUSTOMERS,
	FIRST_DEVISION,
	CHURN_PCT,
	LOAD_DATE
	)
	VALUES
	(
	S.PARTNER_ID,
	S.DATE_ID,
	S.FISCAL_YEAR_START_DT,
	S.NUMBER_OF_MONTHS_PASSED,
	S.NUMBER_OF_CHURNED_CUSTOMERS,
	S.NUMBER_OF_OFFERS,
	S.NUMBER_OF_ACTIVE_CUSTOMERS,
	S.FIRST_DEVISION,
	S.CHURN_PCT,
	@LOAD_DATE
	);

	PRINT ('CALCULATES CHURN FOR ALL OF UNI-TEL FOR RECENT DATA');

	MERGE REPORTING.FACT_CHURN T
	USING 
		(
		SELECT 
		DATE_ID, 
		999 AS PARTNER_ID,
		CAST (SUM(NUMBER_OF_CHURNED_CUSTOMERS) AS DECIMAL(20,10)) AS NUMBER_OF_CHURNED_CUSTOMERS,
		CAST (SUM(NUMBER_OF_OFFERS) AS DECIMAL(20,10)) AS NUMBER_OF_OFFERS,
		CAST (SUM(NUMBER_OF_ACTIVE_CUSTOMERS) AS DECIMAL(20,10)) AS NUMBER_OF_ACTIVE_CUSTOMERS,
		@FISCAL_YEAR_START_DT AS FISCAL_YEAR_START_DT, 
		@NUMBER_OF_MONTHS_PASSED AS NUMBER_OF_MONTHS_PASSED, 
		(
			CAST (SUM(NUMBER_OF_CHURNED_CUSTOMERS) AS DECIMAL(20,10))-CAST (SUM(NUMBER_OF_OFFERS) AS DECIMAL(20,10))
		)
			/CAST (SUM(NUMBER_OF_ACTIVE_CUSTOMERS) AS DECIMAL(20,10))
		AS FIRST_DEVISION,
		(
			(
				CAST (SUM(NUMBER_OF_CHURNED_CUSTOMERS) AS DECIMAL(20,10))-CAST (SUM(NUMBER_OF_OFFERS) AS DECIMAL(20,10))
			)
				/CAST (SUM(NUMBER_OF_ACTIVE_CUSTOMERS) AS DECIMAL(20,10))
		)/@NUMBER_OF_MONTHS_PASSED*12*100 AS CHURN_PCT,
		@LOAD_DATE AS LOAD_DATE
		FROM REPORTING.FACT_CHURN C
		WHERE DATE_ID=@LAST_DAY_LAST_MONTH
		AND PARTNER_ID !=999 -- AVOIDS INCLUDING TOTAL NUMBERS ONCE MORE IF THE PROCEDURE RUNS MORE THAN ONCE
		GROUP BY DATE_ID
		) S

	ON S.PARTNER_ID=T.PARTNER_ID AND S.DATE_ID=T.DATE_ID
	
	WHEN MATCHED THEN 
			
	UPDATE SET 
	T.FISCAL_YEAR_START_DT=S.FISCAL_YEAR_START_DT,
	T.NUMBER_OF_MONTHS_PASSED=S.NUMBER_OF_MONTHS_PASSED,
	T.NUMBER_OF_CHURNED_CUSTOMERS=S.NUMBER_OF_CHURNED_CUSTOMERS,
	T.NUMBER_OF_OFFERS=S.NUMBER_OF_OFFERS,
	T.NUMBER_OF_ACTIVE_CUSTOMERS=S.NUMBER_OF_ACTIVE_CUSTOMERS,
	T.FIRST_DEVISION=S.FIRST_DEVISION,
	T.CHURN_PCT=S.CHURN_PCT,
	T.LOAD_DATE=S.LOAD_DATE

	WHEN NOT MATCHED BY TARGET
	THEN INSERT
	(
	PARTNER_ID,
	DATE_ID,
	FISCAL_YEAR_START_DT,
	NUMBER_OF_MONTHS_PASSED,
	NUMBER_OF_CHURNED_CUSTOMERS,
	NUMBER_OF_OFFERS,
	NUMBER_OF_ACTIVE_CUSTOMERS,
	FIRST_DEVISION,
	CHURN_PCT,
	LOAD_DATE
	)
	VALUES
	(
	S.PARTNER_ID,
	S.DATE_ID,
	S.FISCAL_YEAR_START_DT,
	S.NUMBER_OF_MONTHS_PASSED,
	S.NUMBER_OF_CHURNED_CUSTOMERS,
	S.NUMBER_OF_OFFERS,
	S.NUMBER_OF_ACTIVE_CUSTOMERS,
	S.FIRST_DEVISION,
	S.CHURN_PCT,
	S.LOAD_DATE
	)
	/*
	WHEN SOURCE IS NOT MATCHED THEN DELETE is not used here as the temp in BASELINE.FACT_OMSÆTNING_V normaly
	only will contain currnet year. We do not need the previous years to be deleted. 
	*/
;
	
END

/*
METHOD TO CALCULATE CHURN FRA MR. ISAKSEN

Fra: Morten Isaksen <misak@uni-tel.dk> 
Sendt: 17. februar 2020 14:16
Til: Iben Sønderskov <iben@uni-tel.dk>
Emne: SV: Churn
 
(1)	Kunder pr 1/2-2020: 6235
(2)	Tilbud: 40
(3)	Churnede kunder: 394
 
(394-40)/6235/7*12 = 9,73%

chrun beregning for finansår 2020-2021 dvs. 1.7.2020 til og med 30.6.2021

1. Tal fra http://admin4.uni-tel.dk/admin/forhandlere/stat_1.php
select sum(custnumber) 
from admin.custstats c2 
where rdate='2021-06-30'

2.-- tilbud – husk at sætte det rigtige dato interval ind
SELECT count (distinct ch.cust)
FROM admin.churn  ch
LEFT JOIN admin.cust c ON c.`custid`=ch.`cust`
WHERE ch.dt BETWEEN '2020-07-01' AND '2021-06-30'  
AND ch.cust NOT IN (SELECT custid FROM admin.turnover WHERE amount>0) 
AND c.active=0 
AND c.forhandlerid NOT IN (12,43,0)  #Unitel selv, connection.dk, unicom.dk
AND c.created>'2015-01-01'
AND c.custid NOT IN (SELECT custid FROM admin.custsettings WHERE setting='bill_to_cust');

3.-- churnede kunder – husk at sætte det rigtige dato interval ind
SELECT count (distinct ch.cust) 
FROM admin.churn ch 
LEFT JOIN admin.cust c ON c.custid=ch.cust 
WHERE ch.dt BETWEEN '2019-07-01' AND '2020-06-30'  
AND c.active=0 
AND c.forhandlerid<>12 #Connection A/S sorteres fra. Niebe oplyser, at forhandleren "træk" sig fra Uni-Tel med sine kunder. Derfor skal opsigelserne ikke medregnes

resultater og beregning
1) 7079 aktive kunder 30.6.2021
2) 62 tilbud --turnover ikke opdateret
3) 702

select (702-62)/7079 * 100 
9,04 procent

*/


